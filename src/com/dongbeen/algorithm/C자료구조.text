#define SWAP(x,y,t) ((t)=(x),(x)=(y),(y)=(t))	
#define COMPARE(x,y) (((x)<(y)) ? -1: ((x) == (y))? 0:1)
int *list;	list=(int*)malloc(sizeof(int)*n);
void sort(int list[], int n){
	int i, j, min, temp;
	for (i = 0; i < n-1; i++){
		min= i;
		for (j = i+1; j< n; j++)
			if (list[j] < list[min])
				min = j;
		SWAP(list[i], list[min], temp);	}}
int binsearch(int list[],int searchnum,int left,int right){
    int middle;
    while (left <= right) {
	middle = (left + right)/2;
	switch (COMPARE(list[middle], searchnum)) {
		case -1 : left = middle + 1;
			break;
		case 0 : return middle;
		case 1 : right = middle -1;}}
	return –1;}
●2차원배열합  int **input1;int **input2;int **output;
input1 = (int**)malloc(sizeof(int)*n);
input2 = (int**)malloc(sizeof(int)*n);
output = (int**)malloc(sizeof(int)*n);
for (i=0; i<n; i++)	{
	input1[i]=(int*)malloc(sizeof(int)*m);
	input2[i]=(int*)malloc(sizeof(int)*m);
	output[i]=(int*)malloc(sizeof(int)*m);}
for (i=0; i<n; i++){
	for (j=0; j<m; j++){
		output[i][j]=input1[i][j]+input2[i][j];
		fprintf(file_output, "%d ", output[i][j]);}
	fprintf(file_output, "\n");}
●sparse matrix
typedef struct{	int col;	int row;	int value;}term;
term a [MAX_TERMS];
int n, m, i, j, val;
int k=0;
for(i=0;i<n;i++){for(j=0;j<m;j++){fscanf(f_i, "%d", &val);
	if (val != 0){a[k].row=i;a[k].col=j;a[k].value=val;k++;}}}
for (i=0;i<k;i++){
fprintf(file_output, "%d %d %d\n", a[i].row, a[i].col, a[i].value);}
●push,pop확인    for(i=0; i<n; i++){
	fscanf(file_input, "%s", arr);
	if(strcmp(arr,"push") == 0){
		fscanf(file_input, "%d\n", &j.key);
		push(j, file_output);}
	else if (strcmp(arr,"top") == 0){top(file_output);}
●동적스택  typedef struct {int key;}element;
element *stack;
void push(element X, FILE *file_output){
   if (stack_size <= (Top + 1))   {
      stack_size++;
      stack = (element *)realloc(stack, sizeof(element) * stack_size);}
   stack[++Top] = X;}
element pop(FILE *file_output){
   if (Top == -1){
      fprintf(file_output, "-1\n");
      return;}
   fprintf(file_output, "%d\n", stack[Top].key);
   return stack[Top--];}
●동적큐  element *queue;
int queue_size;int rear = -1;int fronT = -1;
void push(element item, FILE *file_output){
	queue_size++;
	queue=(e*)realloc(queue, sizeof(e)*queue_size);
	queue[++rear] = item;}
element pop(FILE *file_output){
	element temp;
	temp.key = -1;
	if (rear==fronT||(rear==-1)){
		fprintf(file_output, "-1\n");
		return temp;}
	fprintf(file_output, "%d\n", queue[fronT+1]);
	return queue[++fronT];}
●SLList구성,삽입  typedef struct listNode* listPointer;
typedef struct listNode {int d;listPointer l;}listNode;
first = NULL;
rear = NULL;
for (i = 1; i < (N + 1); i++){
	fscanf(file_input, "%d", &data);
	if (first == NULL)	{
		rear = (listNode*)malloc(sizeof(listNode));
		first = rear;	}
	else	{
		rear->link = (listNode*)malloc(sizeof(listNode));
		rear = rear->link;	}
	rear->data = data;
	rear->link = NULL;}
for (temp = first; temp != NULL; temp = temp->link) {
	fprintf(file_output, "%d ", temp->data);}
fprintf(file_output, "\n");
fscanf(file_input, "%d", &M);
for (i = 0; i < M; i++){
	fscanf(file_input, "%d", &j);
	fscanf(file_input, "%d", &k);
	temp2 = (listNode*)malloc(sizeof(listNode));
	temp2->data = j;
	cur = first;
	if (k == 0)	{
		temp2->link = cur;
		first = temp2;	}
	else	{for (cnt = 0; cnt < k - 1; cnt++)	{
			cur = cur->link;	}
		temp2->link = cur->link;
		cur->link = temp2;	}
	for (temp = first; temp != NULL; temp = temp->link) {
		fprintf(file_output, "%d ", temp->data);}
	fprintf(file_output, "\n");}
while (first != NULL){
	temp = first;
	first = first->link;
	free(temp);}
●SLL삭제 for (i = 0; i < M; i++){
	fscanf(file_input, "%d", &k);
	cur = first;
	if (k == 1)first = first->link;
	else {for (cnt = 1; cnt < k - 1; cnt++){
		cur = cur->link;}}
	cur->link = cur->link->link;
●LinkedStack
typedef struct {
	int key;
}element;
typedef struct stack *stackPointer;
typedef struct stack {
	int data;
	stackPointer link;};
stackPointer Top;
void push(int item){
	stackPointer temp;
	MALLOC(temp, sizeof(*temp));
	temp->data = item;
	temp->link = Top;
	Top = temp;}
element pop(FILE *file_output){
	stackPointer temp = Top;
	int item;
	if (!temp)	{
		fprintf(file_output, "-1\n");
		return;	}
	item = temp->data;
	Top = temp->link;
	free(temp);
	fprintf(file_output, "%d\n", item);}
int size(FILE *file_output){
	int size = 0;
	stackPointer temp = Top;
	while (temp != NULL) {
		temp = temp->link;
		size++;	}
	fprintf(file_output, "%d\n", size);
	return;}
●LinkedQueue
typedef struct {
	int key;
}element;
typedef struct queue *queuePointer;
typedef struct queue {
	int data;
	queuePointer link;};
queuePointer fronT, rear;
void push(int item, FILE *file_output){
	queuePointer temp;
	MALLOC(temp, sizeof(*temp));
	temp->data = item;
	temp->link = NULL;
	if (fronT)
		rear->link = temp;
	else
		fronT = temp;
	rear = temp;}
element pop(FILE *file_output){
	queuePointer temp = fronT;
	int item;
	if (!temp)
		fprintf(file_output, "-1\n");
	else {
		item = temp->data;
		fronT = temp->link;
		free(temp);
		fprintf(file_output, "%d\n", item);}}
int size(FILE *file_output){
	int size = 0;
	queuePointer temp = fronT;
	while (temp != NULL) {
		temp = temp->link;
		size++;	}
	fprintf(file_output, "%d\n", size);
	return;}
int front(FILE *file_output){
	if (rear == NULL || fronT == NULL)	{
		fprintf(file_output, "-1\n");	}
	else fprintf(file_output, "%d\n", fronT->data);}
●Polynomial
typedef struct {
   float coef;
   int expon;
}polynomial;
void attach(float coefficient, int exponent, polynomial **D, int indexD){
   *D = (polynomial *)realloc(*D, sizeof(polynomial)*(indexD + 1));
   (*D)[indexD].coef = coefficient;
   (*D)[indexD].expon = exponent;}
void padd(polynomial *A, int sizeA, polynomial *B, int sizeB, polynomial **D, int *sizeD){
   int indexA, indexB, indexD;
   float coefficient;
   indexA = indexB = indexD = 0;
   while (indexA <= sizeA && indexB <= sizeB)
      switch (COMPARE(A[indexA].expon, B[indexB].expon)) {
      case -1:
         attach(B[indexB].coef, B[indexB].expon, D, indexD);
         indexB++;indexD++;break;
      case 0:
         coefficient = A[indexA].coef + B[indexB].coef;
         if (coefficient){
            attach(coefficient, A[indexA].expon, D, indexD);
            indexD++;}
         indexA++;indexB++;break;
      case 1:
         attach(A[indexA].coef, A[indexA].expon, D, indexD);
         indexA++;indexD++;}
   for (; indexA < sizeA; indexA++){
      attach(A[indexA].coef, A[indexA].expon, D, indexD);
      indexD++;}
   for (; indexB < sizeB; indexB++){
      attach(B[indexB].coef, B[indexB].expon, D, indexD);
      indexD++;}*sizeD = indexD - 1;}
int main(){
   int n, m, i;polynomial *A, *B, *D;int sizeD;
   fscanf(fi, "%d", &n);
   A = (polynomial *)malloc(sizeof(polynomial)*n);
   for (i = 0; i < n; i++){
      fscanf(fi, "%f %d", &A[i].coef, &A[i].expon);}
   fscanf(fi, "%d", &m);
   B = (polynomial *)malloc(sizeof(polynomial)*m);
   for (i = 0; i < m; i++)	{
      fscanf(fi, "%f %d", &B[i].coef, &B[i].expon);}
   D = (polynomial *)malloc(sizeof(polynomial) * 1);
   padd(A, n, B, m, &D, &sizeD);
   for (i = 0; i < sizeD; i++){
      fprintf(fo, "%.f %d\n", D[i].coef, D[i].expon);}
   free(A);free(B);free(D);return 0;}